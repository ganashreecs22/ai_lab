{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNrA69+SSlYcmN9t3HGQE6w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ganashreecs22/ai_lab/blob/main/1BM22CS097-WEEK5%20Simulated%20Annealing%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "XE_YFeV2CLLc",
        "outputId": "b14ca578-38bd-413f-c87d-65571b120f1b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution found in 777 iterations: [3, 1, 7, 5, 0, 2, 4, 6]\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import math\n",
        "\n",
        "def calculate_conflicts(state):\n",
        "    \"\"\"Calculate the number of conflicts in the board state.\"\"\"\n",
        "    n = len(state)\n",
        "    conflicts = 0\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):\n",
        "                conflicts += 1\n",
        "    return conflicts\n",
        "\n",
        "def n_queens_simulated_annealing(n, max_iterations=1000, initial_temp=100, cooling_rate=0.99):\n",
        "    # Step 1: Initialize a random configuration\n",
        "    # We represent each queen's position as a list where the index is the row, and the value is the column.\n",
        "    state = [random.randint(0, n - 1) for _ in range(n)]\n",
        "\n",
        "    # Helper function to get a neighbor by moving a queen to another column in the same row\n",
        "    def get_neighbor(state):\n",
        "        neighbor = state[:]\n",
        "        row = random.randint(0, n - 1)\n",
        "        new_col = random.randint(0, n - 1)\n",
        "        while new_col == neighbor[row]:  # Ensure the queen actually moves\n",
        "            new_col = random.randint(0, n - 1)\n",
        "        neighbor[row] = new_col\n",
        "        return neighbor\n",
        "\n",
        "    # Step 2: Initialize parameters\n",
        "    current_conflicts = calculate_conflicts(state)\n",
        "    temperature = initial_temp\n",
        "\n",
        "    for iteration in range(max_iterations):\n",
        "        # Step 3: If solution is found, return the state\n",
        "        if current_conflicts == 0:\n",
        "            return state, iteration  # Solution found\n",
        "\n",
        "        # Step 4: Generate a neighbor and calculate its conflicts\n",
        "        neighbor = get_neighbor(state)\n",
        "        neighbor_conflicts = calculate_conflicts(neighbor)\n",
        "\n",
        "        # Step 5: Calculate delta (change in conflicts)\n",
        "        delta = neighbor_conflicts - current_conflicts\n",
        "\n",
        "        # Step 6: Decide whether to accept the neighbor\n",
        "        if delta < 0 or random.random() < math.exp(-delta / temperature):\n",
        "            state = neighbor\n",
        "            current_conflicts = neighbor_conflicts\n",
        "\n",
        "        # Step 7: Decrease temperature\n",
        "        temperature *= cooling_rate\n",
        "\n",
        "    # Return the best state found if no solution was found within the max_iterations\n",
        "    return state, max_iterations\n",
        "\n",
        "# Example usage\n",
        "n = 8\n",
        "solution, iterations = n_queens_simulated_annealing(n)\n",
        "if calculate_conflicts(solution) == 0:\n",
        "    print(f\"Solution found in {iterations} iterations: {solution}\")\n",
        "else:\n",
        "    print(f\"No solution found after {iterations} iterations. Best state: {solution}\")\n"
      ]
    }
  ]
}