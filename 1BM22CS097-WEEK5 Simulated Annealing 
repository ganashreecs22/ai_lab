{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPC121kC4ArIYtmejqkPu3m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ganashreecs22/ai_lab/blob/main/1BM22CS097-WEEK5%20Simulated%20Annealing%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ir7ifAD2j19s",
        "outputId": "745b73d9-d619-426e-eedb-df9a9753e3a7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X| | \n",
            "-+-+-\n",
            " | | \n",
            "-+-+-\n",
            " | | \n",
            "\n",
            "\n",
            "Enter position for O:3\n",
            "X| |O\n",
            "-+-+-\n",
            " | | \n",
            "-+-+-\n",
            " | | \n",
            "\n",
            "\n",
            "X| |O\n",
            "-+-+-\n",
            "X| | \n",
            "-+-+-\n",
            " | | \n",
            "\n",
            "\n",
            "Enter position for O:7\n",
            "X| |O\n",
            "-+-+-\n",
            "X| | \n",
            "-+-+-\n",
            "O| | \n",
            "\n",
            "\n",
            "X| |O\n",
            "-+-+-\n",
            "X|X| \n",
            "-+-+-\n",
            "O| | \n",
            "\n",
            "\n",
            "Enter position for O:2\n",
            "X|O|O\n",
            "-+-+-\n",
            "X|X| \n",
            "-+-+-\n",
            "O| | \n",
            "\n",
            "\n",
            "X|O|O\n",
            "-+-+-\n",
            "X|X|X\n",
            "-+-+-\n",
            "O| | \n",
            "\n",
            "\n",
            "Bot wins!\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-2802fba361c5>\u001b[0m in \u001b[0;36m<cell line: 143>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    143\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcheckWin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m    \u001b[0mcompMove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 145\u001b[0;31m    \u001b[0mplayerMove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-19-2802fba361c5>\u001b[0m in \u001b[0;36mplayerMove\u001b[0;34m()\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mplayerMove\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 92\u001b[0;31m    \u001b[0mposition\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Enter position for O:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     93\u001b[0m    \u001b[0minsertLetter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplayer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mposition\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m    \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "board={1:' ',2:' ',3:' ',\n",
        "      4:' ',5:' ',6:' ',\n",
        "      7:' ',8:' ',9:' '\n",
        "\n",
        "}\n",
        "\n",
        "def printBoard(board):\n",
        "   print(board[1]+'|'+board[2]+'|'+board[3])\n",
        "   print('-+-+-')\n",
        "   print(board[4] + '|' + board[5] + '|' + board[6])\n",
        "   print('-+-+-')\n",
        "   print(board[7] + '|' + board[8] + '|' + board[9])\n",
        "   print('\\n')\n",
        "\n",
        "def spaceFree(pos):\n",
        "   if(board[pos]==' '):\n",
        "       return True\n",
        "   else:\n",
        "       return False\n",
        "\n",
        "def checkWin():\n",
        "   if(board[1]==board[2] and board[1]==board[3] and board[1]!=' '):\n",
        "       return True\n",
        "   elif(board[4]==board[5] and board[4]==board[6] and board[4]!=' '):\n",
        "       return True\n",
        "   elif(board[7]==board[8] and board[7]==board[9] and board[7]!=' '):\n",
        "       return True\n",
        "   elif (board[1] == board[5] and board[1] == board[9] and board[1] != ' '):\n",
        "       return True\n",
        "   elif (board[3] == board[5] and board[3] == board[7] and board[3] != ' '):\n",
        "       return True\n",
        "   elif (board[1] == board[4] and board[1] == board[7] and board[1] != ' '):\n",
        "       return True\n",
        "   elif (board[2] == board[5] and board[2] == board[8] and board[2] != ' '):\n",
        "       return True\n",
        "   elif (board[3] == board[6] and board[3] == board[9] and board[3] != ' '):\n",
        "       return True\n",
        "   else:\n",
        "       return False\n",
        "\n",
        "def checkMoveForWin(move):\n",
        "   if (board[1]==board[2] and board[1]==board[3] and board[1] ==move):\n",
        "       return True\n",
        "   elif (board[4]==board[5] and board[4]==board[6] and board[4] ==move):\n",
        "       return True\n",
        "   elif (board[7]==board[8] and board[7]==board[9] and board[7] ==move):\n",
        "       return True\n",
        "   elif (board[1]==board[5] and board[1]==board[9] and board[1] ==move):\n",
        "       return True\n",
        "   elif (board[3]==board[5] and board[3]==board[7] and board[3] ==move):\n",
        "       return True\n",
        "   elif (board[1]==board[4] and board[1]==board[7] and board[1] ==move):\n",
        "       return True\n",
        "   elif (board[2]==board[5] and board[2]==board[8] and board[2] ==move):\n",
        "       return True\n",
        "   elif (board[3]==board[6] and board[3]==board[9] and board[3] ==move):\n",
        "       return True\n",
        "   else:\n",
        "       return False\n",
        "\n",
        "def checkDraw():\n",
        "   for key in board.keys():\n",
        "       if (board[key]==' '):\n",
        "           return False\n",
        "   return True\n",
        "\n",
        "\n",
        "def insertLetter(letter, position):\n",
        "   if (spaceFree(position)):\n",
        "       board[position] = letter\n",
        "       printBoard(board)\n",
        "\n",
        "       if (checkDraw()):\n",
        "           print('Draw!')\n",
        "       elif (checkWin()):\n",
        "           if (letter == 'X'):\n",
        "               print('Bot wins!')\n",
        "           else:\n",
        "               print('You win!')\n",
        "       return\n",
        "\n",
        "   else:\n",
        "       print('Position taken, please pick a different position.')\n",
        "       position = int(input('Enter new position: '))\n",
        "       insertLetter(letter, position)\n",
        "       return\n",
        "\n",
        "player = 'O'\n",
        "bot ='X'\n",
        "\n",
        "def playerMove():\n",
        "   position=int(input('Enter position for O:'))\n",
        "   insertLetter(player, position)\n",
        "   return\n",
        "\n",
        "def compMove():\n",
        "   bestScore=-1000\n",
        "   bestMove=0\n",
        "   for key in board.keys():\n",
        "       if (board[key]==' '):\n",
        "           board[key]=bot\n",
        "           score = minimax(board, False)\n",
        "           board[key] = ' '\n",
        "           if (score > bestScore):\n",
        "               bestScore = score\n",
        "               bestMove = key\n",
        "\n",
        "   insertLetter(bot, bestMove)\n",
        "   return\n",
        "\n",
        "\n",
        "def minimax(board, isMaximizing):\n",
        "   if (checkMoveForWin(bot)):\n",
        "       return 1\n",
        "   elif (checkMoveForWin(player)):\n",
        "       return -1\n",
        "   elif (checkDraw()):\n",
        "       return 0\n",
        "\n",
        "   if isMaximizing:\n",
        "       bestScore = -1000\n",
        "\n",
        "       for key in board.keys():\n",
        "           if board[key] == ' ':\n",
        "               board[key] = bot\n",
        "               score = minimax(board, False)\n",
        "               board[key] = ' '\n",
        "               if (score > bestScore):\n",
        "                   bestScore = score\n",
        "       return bestScore\n",
        "   else:\n",
        "       bestScore = 1000\n",
        "\n",
        "       for key in board.keys():\n",
        "           if board[key] == ' ':\n",
        "               board[key] = player\n",
        "               score = minimax(board, True)\n",
        "               board[key] = ' '\n",
        "               if (score < bestScore):\n",
        "                   bestScore = score\n",
        "       return bestScore\n",
        "\n",
        "while not checkWin():\n",
        "   compMove()\n",
        "   playerMove()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def vacuum_world():\n",
        " # initializing goal_state\n",
        " # 0 indicates Clean and 1 indicates Dirty\n",
        "    goal_state = {'A': '0', 'B': '0'}\n",
        "    cost = 0\n",
        "    location_input = input(\"Enter Location of Vacuum\") #user_input oflocation vacuum is placed\n",
        "    status_input = input(\"Enter status of \" + location_input) #user_input iflocation is dirty or clean\n",
        "    status_input_complement = input(\"Enter status of other room\")\n",
        "    print(\"Initial Location Condition\" + str(goal_state))\n",
        "    if location_input == 'A':# Location A is Dirty.\n",
        "            print(\"Vacuum is placed in Location A\")\n",
        "            if status_input == '1':\n",
        "                print(\"Location A is Dirty.\")\n",
        "# suck the di   rt and mark it as clean\n",
        "                goal_state['A'] = '0'\n",
        "                cost += 1 #cost for suck\n",
        "                print(\"Cost for CLEANING A \"+\" \" + str(cost))\n",
        "                print(\"Location A has been Cleaned.\")\n",
        "                if status_input_complement == '1':\n",
        "                    # if B is Dirty\n",
        "                    print(\"Location B is Dirty.\")\n",
        "                    print(\"Moving right to the Location B. \")\n",
        "                    cost += 1 #cost for moving right\n",
        "                    print(\"COST for moving RIGHT\"+\" \" + str(cost))\n",
        "                    # suck the dirt and mark it as clean\n",
        "                    goal_state['B'] = '0'\n",
        "                    cost += 1 #cost for suck\n",
        "                    print(\"COST for SUCK \" +\" \"+ str(cost))\n",
        "                    print(\"Location B has been Cleaned. \")\n",
        "                else:\n",
        "                    print(\"No action\" +\" \"+ str(cost))\n",
        "                    # suck and mark clean\n",
        "                    print(\"Location B is already clean.\")\n",
        "\n",
        "            if status_input == '0':\n",
        "                print(\"Location A is already clean \")\n",
        "                if status_input_complement == '1':# if B is Dirty\n",
        "                    print(\"Location B is Dirty.\")\n",
        "                    print(\"Moving RIGHT to the Location B. \")\n",
        "                    cost += 1 #cost for moving right\n",
        "                    print(\"COST for moving RIGHT \" +\" \"+ str(cost))\n",
        "                    # suck the dirt and mark it as clean\n",
        "                    goal_state['B'] = '0'\n",
        "                    cost += 1 #cost for suck\n",
        "                    print(\"Cost for SUCK\" +\" \"+ str(cost))\n",
        "                    print(\"Location B has been Cleaned. \")\n",
        "                else:\n",
        "                     print(\"No action \" +\" \"+ str(cost))\n",
        "                     print(cost)\n",
        "                     # suck and mark clean\n",
        "                     print(\"Location B is already clean.\")\n",
        "    else:\n",
        "        print(\"Vacuum is placed in location B\")\n",
        "        # Location B is Dirty.\n",
        "        if status_input == '1':\n",
        "              print(\"Location B is Dirty.\")\n",
        "              # suck the dirt and mark it as clean\n",
        "              goal_state['B'] = '0'\n",
        "              cost += 1 # cost for suck\n",
        "              print(\"COST for CLEANING \" +\" \"+ str(cost))\n",
        "              print(\"Location B has been Cleaned.\")\n",
        "              if status_input_complement == '1':\n",
        "              # if A is Dirty\n",
        "                      print(\"Location A is Dirty.\")\n",
        "                      print(\"Moving LEFT to the Location A. \")\n",
        "                      cost += 1 # cost for moving right\n",
        "                      print(\"COST for moving LEFT\" +\" \"+ str(cost))\n",
        "                      # suck the dirt and mark it as clean\n",
        "                      goal_state['A'] = '0'\n",
        "                      cost += 1 # cost for suck\n",
        "                      print(\"COST for SUCK \" +\" \"+ str(cost))\n",
        "                      print(\"Location A has been Cleaned.\")\n",
        "              else:\n",
        "                   print(cost)\n",
        "                   # suck and mark clean\n",
        "                   print(\"Location B is already clean.\")\n",
        "        if status_input=='0' and status_input_complement == '1': # if A is Dirty\n",
        "                print(\"Location A is Dirty.\")\n",
        "                print(\"Moving LEFT to the Location A. \")\n",
        "                cost += 1 # cost for moving right\n",
        "                print(\"COST for moving LEFT \" +\" \"+ str(cost))\n",
        "                # suck the dirt and mark it as clean\n",
        "                goal_state['A'] = '0'\n",
        "                cost += 1 # cost for suck\n",
        "                print(\"Cost for SUCK \" +\" \"+ str(cost))\n",
        "                print(\"Location A has been Cleaned. \")\n",
        "        else:\n",
        "             print(\"No action \" +\" \"+ str(cost))\n",
        "             # suck and mark clean\n",
        "             print(\"Location A is already clean.\")\n",
        "             # done cleaning\n",
        "             print(\"GOAL STATE: \")\n",
        "             print(goal_state)\n",
        "             print(\"Performance Measurement: \" +\" \"+ str(cost))\n",
        "# Output:\n",
        "vacuum_world()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "buyoV8xIj8A-",
        "outputId": "a125a3b9-cfee-4798-fcab-55d35bc96cc7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter Location of VacuumB\n",
            "Enter status of B 1\n",
            "Enter status of other room 0\n",
            "Initial Location Condition{'A': '0', 'B': '0'}\n",
            "Vacuum is placed in location B\n",
            "No action  0\n",
            "Location A is already clean.\n",
            "GOAL STATE: \n",
            "{'A': '0', 'B': '0'}\n",
            "Performance Measurement:  0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import math\n",
        "\n",
        "def calculate_conflicts(state):\n",
        "    \"\"\"Calculate the number of conflicts in the board state.\"\"\"\n",
        "    n = len(state)\n",
        "    conflicts = 0\n",
        "    for i in range(n):\n",
        "        for j in range(i + 1, n):\n",
        "            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):\n",
        "                conflicts += 1\n",
        "    return conflicts\n",
        "\n",
        "def n_queens_simulated_annealing(n, max_iterations=1000, initial_temp=100, cooling_rate=0.99):\n",
        "    # Step 1: Initialize a random configuration\n",
        "    # We represent each queen's position as a list where the index is the row, and the value is the column.\n",
        "    state = [random.randint(0, n - 1) for _ in range(n)]\n",
        "\n",
        "    # Helper function to get a neighbor by moving a queen to another column in the same row\n",
        "    def get_neighbor(state):\n",
        "        neighbor = state[:]\n",
        "        row = random.randint(0, n - 1)\n",
        "        new_col = random.randint(0, n - 1)\n",
        "        while new_col == neighbor[row]:  # Ensure the queen actually moves\n",
        "            new_col = random.randint(0, n - 1)\n",
        "        neighbor[row] = new_col\n",
        "        return neighbor\n",
        "\n",
        "    # Step 2: Initialize parameters\n",
        "    current_conflicts = calculate_conflicts(state)\n",
        "    temperature = initial_temp\n",
        "\n",
        "    for iteration in range(max_iterations):\n",
        "        # Step 3: If solution is found, return the state\n",
        "        if current_conflicts == 0:\n",
        "            return state, iteration  # Solution found\n",
        "\n",
        "        # Step 4: Generate a neighbor and calculate its conflicts\n",
        "        neighbor = get_neighbor(state)\n",
        "        neighbor_conflicts = calculate_conflicts(neighbor)\n",
        "\n",
        "        # Step 5: Calculate delta (change in conflicts)\n",
        "        delta = neighbor_conflicts - current_conflicts\n",
        "\n",
        "        # Step 6: Decide whether to accept the neighbor\n",
        "        if delta < 0 or random.random() < math.exp(-delta / temperature):\n",
        "            state = neighbor\n",
        "            current_conflicts = neighbor_conflicts\n",
        "\n",
        "        # Step 7: Decrease temperature\n",
        "        temperature *= cooling_rate\n",
        "\n",
        "    # Return the best state found if no solution was found within the max_iterations\n",
        "    return state, max_iterations\n",
        "\n",
        "# Example usage\n",
        "n = 8\n",
        "solution, iterations = n_queens_simulated_annealing(n)\n",
        "if calculate_conflicts(solution) == 0:\n",
        "    print(f\"Solution found in {iterations} iterations: {solution}\")\n",
        "else:\n",
        "    print(f\"No solution found after {iterations} iterations. Best state: {solution}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CWWUIG6QAhsd",
        "outputId": "b5aec935-cad3-4c57-b4b5-b76ba23b79cb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution found in 607 iterations: [6, 3, 1, 7, 5, 0, 2, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "combinations = [\n",
        "    (True, True, True), (True, True, False), (True, False, True), (True, False, False),\n",
        "    (False, True, True), (False, True, False), (False, False, True), (False, False, False)\n",
        "]\n",
        "variable = {'p': 0, 'q': 1, 'r': 2}\n",
        "kb = ''\n",
        "q = ''\n",
        "priority = {'~': 3, 'v': 1, '^': 2}\n",
        "\n",
        "def input_rules():\n",
        "    global kb, q\n",
        "    kb = input(\"Enter rule: \")\n",
        "    q = input(\"Enter the Query: \")\n",
        "\n",
        "def entailment():\n",
        "    global kb, q\n",
        "    print('*' * 10 + \" Truth Table Reference \" + '*' * 10)\n",
        "    print('kb', 'alpha')\n",
        "    print('*' * 10)\n",
        "    for comb in combinations:\n",
        "        s = evaluatePostfix(toPostfix(kb), comb)\n",
        "        f = evaluatePostfix(toPostfix(q), comb)\n",
        "        print(s, f)\n",
        "        print('-' * 10)\n",
        "        if s and not f:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "def isOperand(c):\n",
        "    return c.isalpha() and c != 'v'\n",
        "\n",
        "def isLeftParanthesis(c):\n",
        "    return c == '('\n",
        "\n",
        "def isRightParanthesis(c):\n",
        "    return c == ')'\n",
        "\n",
        "def isEmpty(stack):\n",
        "    return len(stack) == 0\n",
        "\n",
        "def peek(stack):\n",
        "    return stack[-1]\n",
        "\n",
        "def hasLessOrEqualPriority(c1, c2):\n",
        "    try:\n",
        "        return priority[c1] <= priority[c2]\n",
        "    except KeyError:\n",
        "        return False\n",
        "\n",
        "def toPostfix(infix):\n",
        "    stack = []\n",
        "    postfix = ''\n",
        "    for c in infix:\n",
        "        if isOperand(c):\n",
        "            postfix += c\n",
        "        else:\n",
        "            if isLeftParanthesis(c):\n",
        "                stack.append(c)\n",
        "            elif isRightParanthesis(c):\n",
        "                operator = stack.pop()\n",
        "                while not isLeftParanthesis(operator):\n",
        "                    postfix += operator\n",
        "                    operator = stack.pop()\n",
        "            else:\n",
        "                while (not isEmpty(stack)) and hasLessOrEqualPriority(c, peek(stack)):\n",
        "                    postfix += stack.pop()\n",
        "                stack.append(c)\n",
        "    while not isEmpty(stack):\n",
        "        postfix += stack.pop()\n",
        "    return postfix\n",
        "\n",
        "def evaluatePostfix(exp, comb):\n",
        "    stack = []\n",
        "    for i in exp:\n",
        "        if isOperand(i):\n",
        "            stack.append(comb[variable[i]])\n",
        "        elif i == '~':\n",
        "            val1 = stack.pop()\n",
        "            stack.append(not val1)\n",
        "        else:\n",
        "            val1 = stack.pop()\n",
        "            val2 = stack.pop()\n",
        "            stack.append(_eval(i, val2, val1))\n",
        "    return stack.pop()\n",
        "\n",
        "def _eval(i, val1, val2):\n",
        "    if i == '^':\n",
        "        return val2 and val1\n",
        "    return val2 or val1\n",
        "\n",
        "input_rules()\n",
        "ans = entailment()\n",
        "if ans:\n",
        "    print(\"The Knowledge Base entails the query\")\n",
        "else:\n",
        "    print(\"The Knowledge Base does not entail the query\")\n"
      ],
      "metadata": {
        "id": "fSsNDAR6mjcP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0e45c7d-0cc0-4dba-c5e0-3bd5f8c1f2d6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter rule: ((p>q)^(q>r)^p)\n",
            "Enter the Query: r\n",
            "********** Truth Table Reference **********\n",
            "kb alpha\n",
            "**********\n",
            "True True\n",
            "----------\n",
            "True False\n",
            "----------\n",
            "The Knowledge Base does not entail the query\n"
          ]
        }
      ]
    }
  ]
}